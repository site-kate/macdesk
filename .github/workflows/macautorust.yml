name: macdesk

on:
  workflow_dispatch:

jobs:
  screenshot:
    runs-on: macos-latest
    timeout-minutes: 240  # Keep runner alive for 4 hours

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download RustDesk for macOS
        run: |
          curl -L "https://github.com/rustdesk/rustdesk/releases/download/1.4.0/rustdesk-1.4.0-x86_64.dmg" -o "$GITHUB_WORKSPACE/rustdesk.dmg"
          hdiutil attach "$GITHUB_WORKSPACE/rustdesk.dmg"
          cp -R "/Volumes/rustdesk-1.4.0/RustDesk.app" "/Applications/"
          hdiutil detach "/Volumes/rustdesk-1.4.0"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pyautogui, pillow, and opencv-python
        run: |
          python -m pip install --upgrade pip
          pip install pyautogui pillow opencv-python

      - name: Start RustDesk
        run: |
          open -a RustDesk
          sleep 10  # Give RustDesk a moment to start

      - name: Select 3-dot menu with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(3)  # Ensure RustDesk window is fully loaded

          try:
              location = pyautogui.locateCenterOnScreen('3dot.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked 3-dot menu at:", location)
              else:
                  print("3-dot menu not found on screen.")
          except Exception as e:
              print("Error locating 3-dot menu:", e)

      - name: Select Security in Menu with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for menu to open

          try:
              location = pyautogui.locateCenterOnScreen('sec.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked Security menu at:", location)
              else:
                  print("Security menu not found on screen.")
          except Exception as e:
              print("Error locating Security menu:", e)

      - name: Select allow in Menu with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for menu to open

          try:
              location = pyautogui.locateCenterOnScreen('alw.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked allow menu at:", location)
              else:
                  print("allow menu not found on screen.")
          except Exception as e:
              print("Error locating allow menu:", e)              

      - name: Select Security in Menu with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for menu to open

          try:
              location = pyautogui.locateCenterOnScreen('sec.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked Security menu at:", location)
              else:
                  print("Security menu not found on screen.")
          except Exception as e:
              print("Error locating Security menu:", e)

      - name: Select unlock
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for menu to open

          try:
              location = pyautogui.locateCenterOnScreen('uss.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked unlock menu at:", location)
              else:
                  print("unlock menu not found on screen.")
          except Exception as e:
              print("Error locating unlock menu:", e)
              
      - name: Select Enable Remote Config Mod with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for security menu to open

          try:
              location = pyautogui.locateCenterOnScreen('ena.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked Enable Remote Config Mod at:", location)
              else:
                  print("Enable Remote Config Mod button not found on screen.")
          except Exception as e:
              print("Error locating Enable Remote Config Mod button:", e)

      - name: Select home with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for enable remote config to process

          try:
              location = pyautogui.locateCenterOnScreen('home.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked home at:", location)
              else:
                  print("home button not found on screen.")
          except Exception as e:
              print("Error locating home button:", e)

      - name: Take Screenshot via Python
        shell: python
        run: |
          import pyautogui
          import os
          
          screenshot = pyautogui.screenshot()
          screenshot.save(os.path.join(os.environ['GITHUB_WORKSPACE'], 'screenshot.png'))
          print("Screenshot saved successfully")

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-screenshot
          path: screenshot.png

      - name: Keep runner alive for 4 hours
        run: |
          echo "Sleeping for 4 hours to keep session active..."
          sleep 14400
